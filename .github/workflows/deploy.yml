name: Deploy and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'npm'
        type: choice
        options:
        - npm
        - github
        - full

env:
  NODE_VERSION: '18'

jobs:
  # Pre-deployment Validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run pre-publish quality control
      run: npm run quality:pre-publish
      
    - name: Run pre-publish security
      run: npm run security:pre-publish
      
    - name: Run pre-publish optimization
      run: npm run optimize:pre-publish
      
    - name: Validate distribution
      run: npm run distribute:validate
      
    - name: Check Git status
      run: npm run git:check-clean

  # Build and Package
  build-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: pre-deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Validate build
      run: npm run validate:build
      
    - name: Test CLI
      run: npm run validate:cli
      
    - name: Create package
      run: npm pack
      
    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: memory-banks-*.tgz
        retention-days: 30

  # Publish to npm
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event.inputs.deploy_type == 'npm' || github.event.inputs.deploy_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check npm authentication
      run: npm run publish:check-auth
      
    - name: Run preflight checks
      run: npm run publish:preflight
      
    - name: Publish to npm
      run: npm run distribute:npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event.inputs.deploy_type == 'github' || github.event.inputs.deploy_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Generate changelog
      run: npm run changelog:generate
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          $(cat CHANGELOG.md | sed -n '/^## \[${{ github.ref_name }}\]/,/^## \[/p' | sed '$d')
          
          ## Installation
          
          ```bash
          npm install -g memory-banks
          ```
          
          Or use with npx:
          
          ```bash
          npx memory-banks init
          ```
          
          ## Documentation
          
          - [README](https://github.com/zacfermanis/memory-banks#readme)
          - [API Documentation](https://github.com/zacfermanis/memory-banks/tree/main/docs)
          
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./memory-banks-*.tgz
        asset_name: memory-banks-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip

  # Post-deployment Validation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [publish-npm, create-github-release]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test published package
      run: npm run distribute:test
      
    - name: Test installation
      run: npm run distribute:install
      
    - name: Monitor deployment
      run: npm run deploy:monitor
      
    - name: Validate deployment
      run: npm run deploy:validate
      
    - name: Generate deployment analytics
      run: npm run deploy:analytics
      
    - name: Check deployment status
      run: npm run deploy:status
      
    - name: Generate deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- npm Package: ${{ needs.publish-npm.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Release: ${{ needs.create-github-release.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Package size: $(npm view memory-banks@${{ github.ref_name }} dist.size 2>/dev/null || 'N/A')" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment status: ${{ needs.publish-npm.result == 'success' || needs.create-github-release.result == 'success' && 'SUCCESS' || 'FAILED' }}" >> $GITHUB_STEP_SUMMARY 