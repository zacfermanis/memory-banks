name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease

env:
  NODE_VERSION: '18'
  NPM_VERSION: 'latest'

jobs:
  # Pre-release Validation
  pre-release-validation:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run quality control
      run: npm run quality:all
      
    - name: Run distribution validation
      run: npm run distribute:validate
      
    - name: Check Git status
      run: npm run git:check-clean
      
    - name: Validate version
      run: npm run version:validate

  # Version Management
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Bump version
      run: |
        if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
          npm run version:prerelease
        elif [ "${{ github.event.inputs.version_type }}" = "minor" ]; then
          npm run version:minor
        elif [ "${{ github.event.inputs.version_type }}" = "major" ]; then
          npm run version:major
        else
          npm run version:patch
        fi
        
    - name: Push changes
      run: |
        git push --follow-tags origin HEAD

  # Build and Package
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [pre-release-validation, version-management]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Validate build
      run: npm run validate:build
      
    - name: Test CLI
      run: npm run validate:cli
      
    - name: Create package
      run: npm pack
      
    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: memory-banks-*.tgz
        retention-days: 30

  # Publish to npm
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Publish to npm
      run: npm run distribute:npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-package, publish-npm]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Generate changelog
      run: npm run changelog:generate
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          $(cat CHANGELOG.md | sed -n '/^## \[${{ github.ref_name }}\]/,/^## \[/p' | sed '$d')
          
          ## Installation
          
          ```bash
          npm install -g memory-banks
          ```
          
          Or use with npx:
          
          ```bash
          npx memory-banks init
          ```
          
          ## Documentation
          
                     - [README](https://github.com/zacfermanis/memory-banks#readme)
           - [API Documentation](https://github.com/zacfermanis/memory-banks/tree/main/docs)
          
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./memory-banks-*.tgz
        asset_name: memory-banks-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip

  # Post-release Validation
  post-release-validation:
    name: Post-release Validation
    runs-on: ubuntu-latest
    needs: [publish-npm, create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test published package
      run: npm run distribute:test-complete
      
    - name: Validate npm package
      run: npm view memory-banks@${{ github.ref_name }}
      
    - name: Test npx installation
      run: npx memory-banks@${{ github.ref_name }} --version
      
    - name: Generate release report
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Published to npm: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Release: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Package size: $(npm view memory-banks@${{ github.ref_name }} dist.size)" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies: $(npm view memory-banks@${{ github.ref_name }} dependencies | wc -l)" >> $GITHUB_STEP_SUMMARY 